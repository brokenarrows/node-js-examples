// Generated by CoffeeScript 1.12.4
(function() {
  var _calculateEndPoint, calculateArrowArray;

  _calculateEndPoint = function(latlng, dist, degree) {
    var B, R, a, bearing, d2r, distance, r2d, rad, source, target, vector;
    distance = dist * this.options.stretch;
    d2r = L.LatLng.DEG_TO_RAD;
    r2d = L.LatLng.RAD_TO_DEG;
    if (this.options.unit.toLowerCase() === 'km') {
      R = 6378.137;
      bearing = degree * d2r;
      distance = distance / R;
      a = Math.acos(Math.cos(distance) * Math.cos((90 - latlng.lat) * d2r) + Math.sin((90 - latlng.lat) * d2r) * Math.sin(distance) * Math.cos(bearing));
      B = Math.asin(Math.sin(distance) * Math.sin(bearing) / Math.sin(a));
      return new L.LatLng(90 - (a * r2d), B * r2d + latlng.lng);
    } else if (this.options.unit.toLowerCase() === 'px') {
      source = this._map.latLngToLayerPoint(latlng);
      rad = degree * d2r;
      vector = L.point(Math.cos(rad) * distance, Math.sin(rad) * distance);
      target = source.add(vector);
      return this._map.layerPointToLatLng(target);
    } else {
      throw Error('end point not defined for unit: ' + this.options.unit);
    }
  };

  calculateArrowArray = function(latlng) {
    var arr, degree, edge;
    degree = this._data.angle;
    if (latlng.length !== void 0) {
      latlng = new L.LatLng(latlng);
    }
    edge = this._calculateEndPoint(latlng, this.options.head, degree - this.options.degree);
    arr = [edge, latlng, this._calculateEndPoint(latlng, this.options.head, degree + this.options.degree)];
    if (this.options.closing) {
      arr.push(edge);
    }
    return arr;
  };

}).call(this);

//# sourceMappingURL=endPointLatLng.js.map
