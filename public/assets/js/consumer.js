// Generated by CoffeeScript 1.12.4
(function() {
  'use strict';
  exports.put = function(request, resource) {
    var name, queue, queueId;
    queueId = +request.data.queueId;
    name = request.body.name;
    if (!Number.isInteger(queueId) || queueId < 0) {
      return resource.status(500).json({
        status: 'error',
        error: 'queue_id:must_be_positive_integer'
      });
    }
    queue = queueManager[queueId];
    if (typeof queue !== 'object') {
      return resource.status(500).json({
        status: 'error',
        error: 'queue:not_found'
      });
    }
    if (!typeof name === 'string') {
      return resource.status(500).json({
        status: 'error',
        error: 'name:must_be_string'
      });
    }
    if (typeof queueManager[queueId] === 'object') {
      queueManager[queueId].name = name;
      return resource.status(200).json({
        status: 'ok'
      });
    }
  };

  exports.get = function(request, resource) {
    var consumers, queue, queueId;
    queueId = request.data.queueId;
    if (!Number.isInteger(queueId) || queueId < 0) {
      return resource.status(500).json({
        status: 'error',
        error: 'queueId:must_be_positive'
      });
    }
    queue = queueManager[queueId];
    if (typeof queue !== 'object') {
      return resource.status(404).json({
        status: 'error',
        error: 'queue:not_found'
      });
    }
    consumers = queue.consumers.filter(function(consumer) {
      return consumer !== null;
    }).map(function(consumer) {
      consumer.queue_id = queueId;
      return consumer;
    });
    return resource.status(200).json(consumers);
  };

  exports["delete"] = function(request, resource) {
    var consumerId, queue, queueId;
    queueId = +request.data.queueId;
    if (!Number.isInteger(queueId) || queueId < 0) {
      return resource.status(500).json({
        status: 'error',
        error: 'queueId:must_be_positive'
      });
    }
    queue = queueManager[queueId];
    if (typeof queue !== 'object') {
      return resource.status(500).json({
        status: 'error',
        error: 'queue:not_found'
      });
    }
    consumerId = +request.data.consumer_id;
    if (!Number.isInteger(consumerId) || consumerId < 0) {
      return resource.status(500).json({
        status: 'error',
        error: 'consumer_id:must_be_positive_integer'
      });
    }
    if (typeof queue.consumers[consumerId] !== 'object') {
      return resource.status(500).json({
        status: 'error',
        error: 'consumer:not_found'
      });
    }
    delete queue.consumers[consumerId];
    return resource.status(200).json({
      status: 'ok'
    });
  };

}).call(this);

//# sourceMappingURL=consumer.js.map
