// Generated by CoffeeScript 1.12.4
(function() {
  var BASE_URL, BASE_URL_CDN, IS_GAME, mapModule;

  if (typeof BASE_URL === 'undefined') {
    BASE_URL = '/';
  }

  if (typeof BASE_URL_CDN === 'undefined') {
    BASE_URL_CDN = 'https://cdn-stepstowar.site/';
  }

  if (typeof IS_GAME === 'undefined') {
    IS_GAME = true;
  }

  mapModule = mapModule || {};

  (function(local) {
    var Green2Red, LayerFillTextOpacity, Red2Green, _token, ajaxRequestMap, baseLayers, earth, filter, filterId, filterKey, gameType, globe, isInteractive, isWizard, layerControl, layerFeatureHighlight, layerFillColor, layerFillDashArray, layerFillOpacity, layerFillTextColor, layerFillWeight, layerGeoJson, layerMiniMap, layerOSM, layerPolygon, layerShown, layerSideBar, layerTerminator, layerTile, layer_comparison_1, layer_comparison_2, location_info_timeout, map, mapCoordinates, mapFeatureElement, mapId, mapIsWarNation, mapMaxZoom, mapSearch, mapType, markerCapital, markerCapitalOwner, markerClusterGroup, markerClusterLat, markerClusterLng, markerEnemy, markerNation, markerNationOwner, markers, nationId, options, sbs, sbs_exists, sbs_layer, timeoutHandler, timerInfo;
    _token = $('[name="csrf_token"]').attr('content');
    mapType = 'world';
    gameType = void 0;
    isInteractive = void 0;
    mapCoordinates = void 0;
    map = '';
    mapMaxZoom = 8;
    mapFeatureElement = void 0;
    mapIsWarNation = false;
    mapSearch = void 0;
    ajaxRequestMap = void 0;
    layerMiniMap = void 0;
    layerGeoJson = '';
    layerOSM = void 0;
    layerControl = L.control();
    layerShown = void 0;
    layerPolygon = void 0;
    layerTerminator = void 0;
    layerSideBar = void 0;
    layerFeatureHighlight = void 0;
    layerTile = void 0;
    baseLayers = void 0;
    earth = void 0;
    layerFillColor = void 0;
    layerFillOpacity = 0.3;
    layerFillWeight = 2;
    layerFillTextColor = '#fff';
    layerFillDashArray = 3;
    LayerFillTextOpacity = 1;
    markers = new L.FeatureGroup;
    markerCapital = void 0;
    markerCapitalOwner = void 0;
    markerNation = void 0;
    markerNationOwner = void 0;
    markerEnemy = void 0;
    markerClusterGroup = void 0;
    markerClusterLat = 0;
    markerClusterLng = 0;
    filter = false;
    filterKey = null;
    filterId = 0;
    timerInfo = void 0;
    isWizard = void 0;
    timeoutHandler = void 0;
    sbs = void 0;
    sbs_exists = false;
    sbs_layer = void 0;
    layer_comparison_1 = void 0;
    layer_comparison_2 = void 0;
    mapId = void 0;
    nationId = void 0;
    globe = false;
    location_info_timeout = void 0;
    Green2Red = [
      {
        pct: 0.0,
        color: {
          r: 0x00,
          g: 0xff,
          b: 0
        }
      }, {
        pct: 0.5,
        color: {
          r: 0xff,
          g: 0xff,
          b: 0
        }
      }, {
        pct: 1.0,
        color: {
          r: 0xff,
          g: 0x00,
          b: 0
        }
      }
    ];
    Red2Green = [
      {
        pct: 0.0,
        color: {
          r: 0xff,
          g: 0x00,
          b: 0
        }
      }, {
        pct: 0.5,
        color: {
          r: 0xff,
          g: 0xff,
          b: 0
        }
      }, {
        pct: 1.0,
        color: {
          r: 0x00,
          g: 0xff,
          b: 0
        }
      }
    ];
    options = {
      radius: 100,
      opacity: 0.9,
      duration: 200,
      lng: function(d) {
        return d[0];
      },
      lat: function(d) {
        return d[1];
      },
      value: function(d) {
        return d.length;
      },
      valueFloor: 0,
      valueCeil: void 0,
      colorRange: ['#f7fbff', '#08306b'],
      onmouseover: function(d, node, layer) {},
      onmouseout: function(d, node, layer) {},
      onclick: function(d, node, layer) {}
    };
    local.getHost = function() {
      var url;
      url = BASE_URL + 'cdn/worldmap/{z}-r{y}-c{x}.jpg';
      if (local.getMapType() === 'world') {
        url = 'https://{s}.stepstowar.com/cdn/worldmap/{z}-r{y}-c{x}.jpg';
      } else if (local.getMapType() === 'war') {
        url = 'https://{s}.stepstowar.com/cdn/warmap/{z}-r{y}-c{x}.jpg';
      } else if (local.getMapType() === 'strategy') {
        url = 'https://{s}.stepstowar.com/cdn/worldmap/{z}-r{y}-c{x}.jpg';
      }
      return url;
    };
    local.initalize = function(lat, lng, zoom, zoomsliderControl) {
      var bounds, element, g, northEast, southWest, svg;
      map = L.map('map', {
        maxZoom: local.getMaxZoom(),
        zoomControl: false,
        zoomsliderControl: zoomsliderControl,
        attributionControl: false,
        contextmenu: false
      }).setView([lat, lng], zoom);
      southWest = L.latLng(-90, -190);
      northEast = L.latLng(90, 190);
      bounds = L.latLngBounds(southWest, northEast);
      map.setMaxBounds(bounds);
      layerTile = L.tileLayer(local.getHost(), {
        maxZoom: local.getMaxZoom(),
        noWrap: false
      }).addTo(map);
      local.invalidateMap();
      if (local.getGameType() === 2 || local.getGameType() === 3) {
        local.initializeLayersWeather();
      }
      if (local.getGameType() === 3) {
        svg = d3.select(map.getPanes().overlayPane).append('svg');
        g = svg.append('g').attr('class', 'leaflet-zoom-hide');
        element = document.getElementById('diagram-pathfinding');
        element.style = '';
        map.getPanes().overlayPane.appendChild(element);
        map.zoomIn(13);
      }
    };
    local.initializeGlobe = function() {
      map = new WE.map('map');
      map.setView([46.8011, 8.2266], 2);
      WE.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.jpg', {
        tileSize: 256,
        bounds: [[-85, -180], [85, 180]],
        minZoom: 0,
        maxZoom: 13,
        attribution: 'Earth',
        tms: false
      }).addTo(map);
    };
    local.initializeLayerOnly = function() {
      map.eachLayer(function(layer) {
        map.removeLayer(layer);
      });
      map.removeLayer(earth);
      layerTile = L.tileLayer(local.getHost(), {
        maxZoom: local.getMaxZoom(),
        noWrap: false
      }).addTo(map);
      local.invalidateMap();
    };
    local.initializeLayersWeather = function() {
      var clouds, precipitation, pressure, temp, wind, world;
      earth = L.layerGroup();
      pressure = L.tileLayer('https://a.maps.owm.io/map/pressure_new/{z}/{x}/{y}?{appid}', {
        noWrap: false,
        appid: 'appid=b1b15e88fa797225412429c1c50c122a1'
      }).addTo(earth);
      precipitation = L.tileLayer('https://a.maps.owm.io/map/precipitation_new/{z}/{x}/{y}?{appid}', {
        noWrap: false,
        appid: 'appid=b1b15e88fa797225412429c1c50c122a1'
      }).addTo(earth);
      wind = L.tileLayer('https://a.maps.owm.io/map/wind_new/{z}/{x}/{y}?{appid}', {
        noWrap: false,
        appid: 'appid=b1b15e88fa797225412429c1c50c122a1'
      }).addTo(earth);
      clouds = L.tileLayer('https://a.maps.owm.io/map/clouds_new/{z}/{x}/{y}?{appid}', {
        noWrap: false,
        appid: 'appid=b1b15e88fa797225412429c1c50c122a1'
      }).addTo(earth);
      temp = L.tileLayer('https://a.maps.owm.io/map/temp_new/{z}/{x}/{y}?{appid}', {
        noWrap: false,
        appid: 'appid=b1b15e88fa797225412429c1c50c122a1'
      }).addTo(earth);
      world = L.tileLayer(local.getHost(), {
        noWrap: false
      }).addTo(earth);
      baseLayers = {
        'World': world,
        'Pressure': pressure,
        'Precipitation': precipitation,
        'Wind': wind,
        'Clouds': clouds,
        'Temperature': temp
      };
      L.control.layers(baseLayers).addTo(map);
      local.dayAndNight();
      local.invalidateMap();
    };
    local.dayAndNight = function() {
      var startTime, t, timeString;
      L.terminator({
        time: '2017-06-19T12:01:00Z'
      });
      timeString = '2017-06-20T12:00:00';
      startTime = new Date(timeString);
      t = L.terminator();
      t.addTo(map);

      /*
       Every day is 240 seconds ( minutes)
       Every 1 hour = 10 seconds
       every 10 minutes = 1.6666 seconds
       every 1 minute = 0.1666 seconds
       */
      local.updateTerminator(t, startTime);
      setInterval((function() {
        local.updateTerminator(t, startTime);
      }), 10000);
    };
    local.updateTerminator = function(t, startTime) {
      var t2;
      startTime.setHours(startTime.getHours() + 1);
      if (startTime.getHours() === 0) {
        startTime.setHours(startTime.getDay() + 1);
      }
      t2 = L.terminator({
        time: startTime
      });
      t.setLatLngs(t2.getLatLngs());
      t.redraw();
    };
    local.mapMoveHandler = function(panToLocation) {
      window.clearTimeout(timeoutHandler);
      timeoutHandler = window.setTimeout((function() {
        local.onMapMovement(panToLocation);
      }), 0);
    };
    local.mapDragHandler = function() {
      window.clearTimeout(timeoutHandler);
    };
    local.invalidateMap = function() {
      var doc_height;
      if (local.getGameType() === 1) {
        doc_height = parseInt($('.panel.form-wizard').height()) + 100;
        if ($(window).height() > doc_height) {
          doc_height = $(window).height();
        }
        $('#map').css({
          width: $(window).width(),
          height: doc_height,
          top: 0
        });
      } else if (local.getGameType() === 2) {
        $('#map').css({
          width: parseInt($(window).width()) + 'px',
          height: parseInt($(window).height() - $('.page-header').height()) + 'px',
          left: 0,
          top: 55 + 'px',
          position: 'absolute'
        });
      } else if (local.getGameType() === 3) {
        $('#map').css({
          width: $(window).width() + 'px',
          height: parseInt($(window).height() - $('.page-header').height()) + 'px',
          left: 0,
          top: 55 + 'px'
        });
      }
      map.invalidateSize();
    };
    local.onMapMovement = function(panToLocation) {
      map.removeLayer(layerGeoJson);
      local.generateBoundary(panToLocation);
    };
    local.enableInteraction = function(value) {
      if (IS_MOBILE) {
        return false;
      }
      if (value) {
        map.dragging.enable();
        map.touchZoom.enable();
        map.doubleClickZoom.enable();
        map.scrollWheelZoom.enable();
        map.boxZoom.enable();
        map.keyboard.enable();
        new L.Hash(map);
        map.on('move', function() {
          local.mapMoveHandler(true);
          local.hideContextMenu();
        });
        map.on('zoomend', function() {
          local.mapMoveHandler(true);
          local.hideContextMenu();
        });
        map.on('moveend', function() {
          local.mapMoveHandler(true);
          local.hideContextMenu();
        });
        map.on('dragend', function() {
          local.mapMoveHandler(true);
          local.hideContextMenu();
        });
        map.on('drag', function() {
          local.mapDragHandler();
          local.hideContextMenu();
        });
        map.on('zoom', function() {
          local.mapDragHandler();
          local.hideContextMenu();
        });
        $('.leaflet-control-zoomslider').show();
        $('.leaflet-container').css('cursor', 'drag');
      } else {
        map.dragging.disable();
        map.touchZoom.disable();
        map.doubleClickZoom.disable();
        map.scrollWheelZoom.disable();
        map.boxZoom.disable();
        map.keyboard.disable();
        $('.leaflet-control-zoomslider').hide();
        $('.leaflet-container').css('cursor', 'default');
      }
    };
    local.enableWarInteraction = function(value) {
      if (value) {
        map.dragging.disable();
        map.touchZoom.disable();
        map.doubleClickZoom.disable();
        map.scrollWheelZoom.disable();
        map.boxZoom.disable();
        map.keyboard.disable();
        $('.leaflet-control-zoomslider').hide();
      }
    };
    local.isWater = function(type) {
      var context, image, lat, lng;
      lat = void 0;
      lng = void 0;
      if (type === 'polyline') {
        lat = e.lat;
        lng = e.lng;
      } else {
        lat = e._latlng.lat;
        lng = e._latlng.lng;
      }
      image = new Image;
      context = $('canvas.map')[0].getContext('2d');
      image.src = BASE_URL + 'warmode/fetch/map/' + lat + '/' + lng;
      image.onload = function() {
        var pixels;
        context.drawImage(image, 0, 0, 256, 256);
        pixels = context.getImageData(1, 1, 1, 1).data;
        if (local.isColorWater(pixels)) {
          swal('You can\'t play land units on water', '', 'error');
        }
      };
    };
    local.isColorWater = function(bytes) {
      var our_color_bytes, water_color_bytes;
      water_color_bytes = [0, 254, 0];
      our_color_bytes = [bytes[0], bytes[1], bytes[2]];
      return _.isEqual(water_color_bytes, our_color_bytes);
    };
    local.modeWarButton = function() {
      L.easyButton('fa-fighter-jet', (function() {
        local.isWarMode(true);
      }), 'War Mode', 'btn_warmode', map);
    };
    local.goHome = function() {
      $.ajax({
        type: 'post',
        url: BASE_URL + 'ajax/map/capital',
        data: '&_token=' + $('[name="csrf_token"]').attr('content'),
        dataType: 'json'
      }).done(function(data) {});
      map.panTo(new L.LatLng(data.lat, data.lon, 8));
      map.zoomIn(8);
      return;
    };
    local.modeHomeButton = function() {
      L.easyButton('fa-home', (function() {
        local.goHome();
      }), 'Go to Capital', 'btn_gotocapital', map);
    };
    local.modeNormalButton = function() {
      L.easyButton('fa-trophy', (function() {
        local.isWarMode(false);
      }), 'Normal Mode', 'btn_normalmode', map);
    };
    local.modeCompareButton = function() {
      L.easyButton(' fa-map-signs', (function() {
        local.enableComparison();
      }), 'Compare Mode', 'btn_comparemode', map);
    };
    local.modeGlobeButton = function() {
      L.easyButton(' fa-globe', (function() {
        local.enableGlobe();
      }), 'Globe Mode', 'btn_globemode', map);
    };
    local.enableGlobe = function() {
      map.remove();
      if (globe === false) {
        local.initializeGlobe();
      } else {
        local.initializeLayerOnly();
      }
    };
    local.enableMapFilter = function(filter) {
      local.setFilter(filter);
      local.generateBoundary();
    };
    local.pluginTerminator = function(status) {
      if (status) {
        layerTerminator = L.terminator().addTo(map);
      } else {
        layerTerminator.removeFrom(map);
      }
    };
    local.pluginSideBar = function(status) {
      if (status) {
        layerSideBar = L.control.sidebar('sidebar').addTo(map);
      } else {
        layerSideBar.removeFrom(map);
      }
    };
    local.pluginMiniMap = function(status) {
      if (status) {
        layerOSM = new L.TileLayer(local.getHost(), {
          noWrap: false,
          minZoom: 1,
          maxZoom: mapMaxZoom,
          toggleDisplay: false
        });
        layerMiniMap = new L.Control.MiniMap(layerOSM).addTo(map);
      } else {
        layerMiniMap.removeFrom(map);
      }
    };
    local.pluginMapFilter = function(key, id) {
      $('#context-menu-layer:gt(2)').remove();
      $('.context-menu-root:gt(2)').remove();
      if (key !== 'thermal') {
        local.setFilter(id);
        local.setFilterId(key);
        local.legendInfoLayer(key, id);
      } else {
        local.setFilterId(0);
        local.setFilter('nations');
        $('.selected_item').remove();
        $('.info_legend').remove();
      }
      local.generateBoundary();
    };
    local.pluginCoordinates = function() {
      mapCoordinates = L.control.coordinates({
        position: 'bottomright',
        decimals: 2,
        decimalSeperator: '.',
        labelTemplateLat: 'Latitude: {y}',
        labelTemplateLng: 'Longitude: {x}',
        enableUserInput: true,
        useDMS: false,
        useLatLngOrder: true
      }).addTo(map);
    };
    local.legendInfoLayer = function(key, type) {
      var color, legend, thisKey, thisKeyText, width;
      color = 'r2g';
      $('.info_legend').remove();
      console.log(type);
      if (type === 'gdp') {
        color = 'r2g';
      }
      if (type === 'gdp_growth') {
        color = 'r2g';
      }
      if (type === 'birth_rate') {
        color = 'r2g';
      }
      if (type === 'death_rate') {
        color = 'g2r';
      }
      if (type === 'corruption') {
        color = 'g2r';
      }
      if (type === 'debt') {
        color = 'g2r';
      }
      if (type === 'inflation') {
        color = 'g2r';
      }
      if (type === 'credit_rating') {
        color = 'g2r';
      }
      if (type === 'population') {
        color = 'r2g';
      }
      if (type === 'economy') {
        color = 'r2g';
      }
      if (type === 'military') {
        color = 'r2g';
      }
      if (type === 'research') {
        color = 'r2g';
      }
      if (type === 'resources') {
        color = 'r2g';
      }
      if (type === 'human_development') {
        color = 'r2g';
      }
      if (type === 'relations') {
        color = 'r2g';
      }
      if (type === 'political') {
        color = 'r2g';
      }
      if (type === 'wars') {
        color = 'r2g';
      }
      if (type === 'political') {
        return false;
      }
      width = parseInt($(window).width() - $('#sidebar-left').width());
      thisKey = $('.' + key + ' span').first();
      thisKeyText = thisKey.text();
      legend = L.control({
        position: 'bottomleft'
      });
      if (type === 'relations') {
        legend.onAdd = function(map) {
          var div, html;
          div = L.DomUtil.create('div', 'info_legend');
          div.style.width = '225px';
          html = '<span style="width:100%" class="title">Legend: ' + thisKeyText + '</span> <div class="clearfix"></div> ';
          html += '<div class="">';
          html += '<table class="table table-bordered" style="background: #171717; opacity:0.75">';
          html += '<tbody>';
          html += '<tr> <td>Cold</td> <td style="background-color: #00ffd7"></td> </tr>';
          html += '<tr> <td>Neutral</td>  <td style="background-color: #dae3e3"></td> </tr>';
          html += '<tr> <td>Warm</td>  <td style="background-color: #ffe513"></td> </tr>';
          html += '<tr> <td>Hot</td>  <td style="background-color: #ff9805"></td> </tr>';
          html += '</tbody>';
          html += '</table>';
          html += '</div>';
          div.innerHTML = html;
          return div;
        };
      } else {
        legend.onAdd = function(map) {
          var div, html, i, l, ul;
          div = L.DomUtil.create('div', 'info_legend');
          div.style.width = width + 'px';
          html = '<span class="title">Legend: ' + thisKeyText + '</span> <div class="clearfix"></div> ';
          html += '<ul style="padding-left:0"> ';
          ul = document.createElement('ul');
          i = 0;
          l = 25;
          while (i <= l) {
            html += '<li style="width: ' + parseInt(width / 26.5) + 'px;background-color:' + local.getColorForPercentage(i / l, color) + '"> ' + (i / l * 100).toFixed(0) + '%' + ' </li>';
            i++;
          }
          html += '</ul> ';
          div.innerHTML = html;
          return div;
        };
      }
      return legend.addTo(map);
    };
    local.legendWars = function(key) {};
    local.generateBoundary = function(panToLocation) {
      var bounds, center, max, min, zoom;
      if (local.getFilterId() > 0) {
        mapIsWarNation = true;
      }
      center = map.getCenter();
      zoom = map.getZoom();
      bounds = map.getBounds();
      min = bounds.getSouthWest().wrap();
      max = bounds.getNorthEast().wrap();
      if (zoom > 4) {
        if (panToLocation) {
          map.panTo(new L.LatLng(center.lat, center.lng, zoom));
        }
        local.getJsonByBoundary(min.lng, min.lat, max.lng, max.lat, mapIsWarNation);
      } else {
        map.removeLayer(markers);
      }
      map.invalidateSize();
    };
    local.getJsonByBoundary = function(lon1, lat1, lon2, lat2, warnation) {
      var data;
      map.removeLayer(layerGeoJson);
      data = {
        'lat1': lat1,
        'lat2': lat2,
        'lon1': lon1,
        'lon2': lon2,
        'type': local.getGameType(),
        'wizard': local.getGameType(),
        'filter': local.getFilter(),
        'filter_id': local.getFilterId(),
        '_token': $('[name="csrf_token"]').attr('content')
      };
      if (ajaxRequestMap) {
        ajaxRequestMap.abort();
      }
      ajaxRequestMap = $.ajax({
        type: 'post',
        url: BASE_URL + 'ajax/map/boundary',
        data: data,
        dataType: 'json'
      }).done(function(data) {
        map.removeLayer(layerGeoJson);
        if (warnation) {
          layerGeoJson = L.geoJson(data, {
            style: local.layerFeatureStyle,
            onEachFeature: local.layerOnEachFeature
          }).addTo(map);
          map.touchZoom.disable();
          map.doubleClickZoom.disable();
          map.scrollWheelZoom.disable();
          map.boxZoom.disable();
          map.keyboard.disable();
        } else {
          layerGeoJson = L.geoJson(data, {
            style: local.layerFeatureStyle,
            onEachFeature: local.layerOnEachFeature
          }).addTo(map);
        }
      });
    };
    local.getCurrentLocation = function() {
      var bounds, center, max, min, zoom;
      center = map.getCenter();
      zoom = map.getZoom();
      bounds = map.getBounds();
      min = bounds.getSouthWest().wrap();
      max = bounds.getNorthEast().wrap();
      return [min, max, center, zoom];
    };
    local.getNationSearchInfo = function(url) {
      mapSearch = map.addControl(new L.Control.Search({
        url: url,
        text: 'Search Nation',
        markerLocation: true
      }));
    };
    local.getNationInfo = function(id, type) {
      var url_type;
      url_type = void 0;
      if (type === 'basic') {
        url_type = BASE_URL + 'ajax/map/nation';
      } else {
        url_type = BASE_URL + 'ajax/map/nation_detail';
      }
      $.ajax({
        type: 'post',
        url: url_type,
        data: {
          'id': id,
          '_token': _token,
          'type': type
        },
        dataType: 'json'
      }).done(function(data) {});
      if (type === 'basic') {
        local.setInfoPanel(data);
      } else if (type === 'detail') {
        local.setModalPanel(data, '.modal-basic');
      }
      return;
    };
    local.getLocationInfo = function(id, type) {
      var url_type;
      url_type = void 0;
      if (type === 'basic') {
        url_type = BASE_URL + 'ajax/map/location';
      } else {
        url_type = BASE_URL + 'ajax/map/location_detail';
      }
      $.ajax({
        type: 'post',
        url: url_type,
        data: 'id=' + id + '&_token=' + $('[name="csrf_token"]').attr('content'),
        dataType: 'json'
      }).done(function(data) {});
      if (type === 'basic') {
        local.setInfoPanel(data);
      } else if (type === 'detail') {
        local.setModalPanel(data, '.modal-width');
      }
      return;
    };
    local.setInfoPanel = function(data) {
      $('.info_hover .panel-body').html(data.content);
      $('.info_hover .panel-title').html(data.title);
      $('.info_hover').css('display', 'block');
    };
    local.setModalPanel = function(data, type) {
      $(type + ' .panel-title').text(data.title);
      $(type + ' .modal-text').html(data.content);
      $.magnificPopup.open({
        items: {
          src: type
        },
        type: 'inline',
        height: '100%',
        preloader: false,
        modal: true,
        alignTop: true
      });
    };
    local.setContentBlockPanel = function(data) {
      $('.content-block').show();
      $('.content-block .panel-title').text(data.title);
      $('.content-block .modal-wrapper').html(data.content);
    };
    local.getRandomRange = function(from, to, fixed) {
      return (Math.random() * (to - from) + from).toFixed(fixed) * 1;
    };
    local.getRandomViewMap = function() {
      var lat, lon;
      lat = local.getRandomRange(-85, 85, 3);
      lon = local.getRandomRange(-140, 140, 3);
      map.panTo(new L.LatLng(lat, lon, 4));
      map.invalidateSize();
    };
    local.layerInfo = function() {
      layerControl.onAdd = function(map) {
        this._div = L.DomUtil.create('div', 'info_hover');
        this.update();
        return this._div;
      };
      layerControl.update = function(props) {
        this._div.innerHTML = '<section class="panel panel-featured panel-featured-success"> <header class="panel-heading"> <div class="panel-actions"> </div><h2 class="panel-title"> </h2></header><div class="panel-body"></div></section>';
      };
      layerControl.addTo(map);
    };
    local.layerFeatureStyle = function(feature) {
      var capital, fill_color, type;
      fill_color = null;
      type = local.getFilterId();
      if (type.toString().indexOf('thermal') !== -1) {
        if (local.getFilter() === 'political' || local.getFilter() === 'relations') {
          fill_color = feature.properties.color;
        } else {
          fill_color = local.getColorForPercentage(feature.properties.color / 25, feature.properties.color_group);
        }
      } else {
        if (parseInt(feature.properties.is_owned) === 1) {
          fill_color = '#0c9700';
          if (parseInt(feature.properties.is_capital) === 1) {
            capital = L.AwesomeMarkers.icon({
              icon: 'star',
              markerColor: 'green'
            });
            L.marker([feature.properties.lat, feature.properties.lon], {
              icon: capital
            }).addTo(map);
          }
        } else {
          fill_color = feature.properties.color;
        }
      }
      return {
        weight: layerFillWeight,
        opacity: LayerFillTextOpacity,
        color: fill_color,
        dashArray: layerFillDashArray,
        fillOpacity: layerFillOpacity,
        fillColor: fill_color
      };
    };
    local.layerFeatureHighlight = function(e) {
      var fillColor, layer;
      layer = e.target;
      fillColor = 'white';
      if (!L.Browser.ie && !L.Browser.opera) {
        layer.bringToFront();
      }
      $('.info_hover .panel-body').html('');
      if (local.getGameType() === 1) {
        local.setTimeOutLocationInfo(layer.feature.properties.id, 'basic');
        fillColor = '#69a22d';
      } else if (local.getGameType() === 2) {
        local.setTimeOutNationInfo(layer.feature.properties.id, 'basic');
      } else if (local.getGameType() === 3) {

      } else {

      }
      if (parseInt(layer.feature.properties.is_owned) === 1) {
        fillColor = '#69a22d';
      } else if (parseInt(layer.feature.properties.is_owned) === 0) {
        fillColor = '#ff1826';
      }
      layer.setStyle({
        weight: layerFillWeight,
        color: fillColor,
        dashArray: layerFillDashArray,
        fillOpacity: layerFillOpacity,
        fillColor: fillColor
      });
    };
    local.layerFeatureClick = function(e) {
      var layer;
      layer = e.target;
      layer.setStyle({
        weight: layerFillWeight,
        color: layerFillTextColor,
        dashArray: layerFillDashArray,
        fillOpacity: layerFillOpacity,
        fillColor: layerFillTextColor
      });
      if (!L.Browser.ie && !L.Browser.opera) {
        layer.bringToFront();
      }
      $('.info_hover .panel-body').html('');
      local.contextMenuInit(layer);
    };
    local.contextMenuInit = function(layer) {
      if (local.getGameType() === 1) {
        local.getLocationInfo(layer.feature.properties.id, 'detail');
      } else if (gameType === 2) {
        if (parseFloat(layer.feature.properties.is_thermal) === 1) {
          toolsModule.enableContextMenu(layer.feature, 'own');
        } else {
          if (parseFloat(layer.feature.properties.is_owned) === 1) {
            toolsModule.enableContextMenu(layer.feature, 'own');
          } else if (parseFloat(layer.feature.properties.is_owned) === 0) {
            toolsModule.enableContextMenu(layer.feature, 'normal');
          }
        }
      } else if (local.getGameType() === 3) {
        if (parseFloat(layer.feature.properties.is_owned) !== 1) {
          $.ajax({
            type: 'post',
            url: BASE_URL + 'ajax/warmode/index',
            data: {
              'id': layer.feature.properties.id,
              '_token': _token
            },
            dataType: 'json'
          }).done(function(data) {});
          local.setModalPanel(data, '.modal-width');
          return;
        }
      } else if (local.getGameType() === 4) {
        toolsModule.enableContextMenu(layer.feature, 'planner');
      }
    };
    local.styleThermal = function(feature) {
      return {
        weight: 2,
        opacity: 1,
        color: 'white',
        dashArray: '3',
        fillOpacity: 0.8,
        fillColor: local.getColorThermal(feature.properties.color)
      };
    };
    local.layerFeatureHighlightReset = function(e) {
      layerGeoJson.resetStyle(e.target);
      clearTimeout(timerInfo);
      layerControl.update();
      $('.info_hover').hide();
    };
    local.layerFeatureZoomTo = function(e) {
      map.fitBounds(e.target.getBounds());
    };
    local.layerMapZoomTo = function(lat, lng, zoom) {
      map.panTo(new L.LatLng(lat, lng, zoom));
      map.zoomIn(zoom);
      map.invalidateSize();
    };
    local.layerOnEachFeature = function(feature, layer) {
      layer.on({
        mouseover: local.layerFeatureHighlight,
        mouseout: local.layerFeatureHighlightReset,
        click: local.layerFeatureClick
      });
    };
    local.setTimeOutNationInfo = function(id, type) {
      local.getNationInfo(id, type);
    };
    local.setTimeOutLocationInfo = function(id, type) {
      clearTimeout(location_info_timeout);
      location_info_timeout = setTimeout((function() {
        local.getLocationInfo(id, type);
      }), 1500);
    };
    local.setIntervalJson = function() {
      setInterval(local.getRandomViewMap, 30000);
    };
    local.hideContextMenu = function() {
      if (local.getGameType() > 1) {
        $('#rightclick').contextMenu('hide');
        $('#rightclick-1').contextMenu('hide');
        $('#rightclick-2').contextMenu('hide');
      }
      $('.info_hover').hide();
    };
    local.isWarMode = function(status) {
      local.hideContextMenu();
      if (status) {
        $('.btn_warmode').remove();
        $('.btn_normalmode').remove();
        $('.btn_gotocapital').remove();
        $('.btn_globemode').remove();
        local.modeNormalButton();
        local.modeHomeButton();
        local.modeCompareButton();
        local.setGameType(3);
        local.setMaxZoom(13);
        local.setMapType('war');
        local.enableWarInteraction(false);
        $('.header-warmode').show();
        $('.sidebar-normal').hide();
        $('.page-header').hide();
      } else {
        $('.btn_warmode').remove();
        $('.btn_normalmode').remove();
        $('.btn_comparemode').remove();
        $('.btn_gotocapital').remove();
        local.modeWarButton();
        local.modeHomeButton();
        local.setGameType(2);
        local.setMaxZoom(8);
        local.setMapType('world');
        local.enableInteraction(true);
        $('.sidebar-normal').show();
        $('.page-header').show();
        $('.header-warmode').hide();
      }
      sbs_exists = local.destroyComparison(sbs_exists);
      local.initializeLayerOnly();
      map.invalidateSize();
      local.setFilter('nations');
    };
    local.enableComparison = function() {
      sbs_layer = L.layerGroup();
      layer_comparison_1 = L.tileLayer('https://a.maps.owm.io/map/clouds_new/{z}/{x}/{y}?{appid}', {
        noWrap: false,
        appid: 'appid=b1b15e88fa797225412429c1c50c122a1'
      }).addTo(map);
      layer_comparison_2 = L.tileLayer('https://a.maps.owm.io/map/temp_new/{z}/{x}/{y}?{appid}', {
        noWrap: false,
        appid: 'appid=b1b15e88fa797225412429c1c50c122a1'
      }).addTo(map);
      sbs = L.control.sideBySide(layer_comparison_1, layer_comparison_2).addTo(map);
      sbs_exists = local.destroyComparison(sbs_exists);
    };
    local.destroyComparison = function(status) {
      if (status) {
        local.initializeLayerOnly();
        $('.leaflet-sbs').remove();
        sbs_exists = false;
      } else {
        sbs_exists = true;
      }
      return sbs_exists;
    };
    local.disableGeoJsonLayer = function() {
      map.removeLayer(layerGeoJson);
    };
    local.disablePluginCoordinates = function() {
      map.removeControl(mapCoordinates);
    };
    local.disablePluginMiniMap = function() {
      layerMiniMap.removeFrom(map);
    };
    local.getColor = function(value) {
      var hue;
      hue = ((1 - value) * 120).toString(10);
      return ['hsl(', hue, ',100%,50%)'].join('');
    };
    local.getColorForPercentage = function(pct, group) {
      var color, i, lower, pctLower, pctUpper, percentColors, range, rangePct, upper;
      percentColors = Red2Green;
      if (group === 'r2g') {
        percentColors = Red2Green;
      } else if (group === 'g2r') {
        percentColors = Green2Red;
      }
      i = 1;
      while (i < percentColors.length - 1) {
        if (pct < percentColors[i].pct) {
          break;
        }
        i++;
      }
      lower = percentColors[i - 1];
      upper = percentColors[i];
      range = upper.pct - lower.pct;
      rangePct = (pct - lower.pct) / range;
      pctLower = 1 - rangePct;
      pctUpper = rangePct;
      color = {
        r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),
        g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),
        b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper)
      };
      return 'rgb(' + [color.r, color.g, color.b].join(',') + ')';
    };
    local.getColorThermal = function(d) {
      if (d > 100) {
        return '#800026';
      } else if (d > 90) {
        return '#BD0026';
      } else if (d > 80) {
        return '#E31A1C';
      } else if (d > 70) {
        return '#FC4E2A';
      } else if (d > 50) {
        return '#FD8D3C';
      } else if (d > 25) {
        return '#FEB24C';
      } else if (d > 10) {
        return '#FED976';
      } else {
        return '#FFEDA0';
      }
    };
    local.getColorResource = function(d) {
      var colors;
      colors = ['7e1e9c', '15b01a', '0343df', 'ff81c0', '653700', 'e50000', '95d0fc', 'f97306', 'c20078', 'ffff14', '929591', 'bf77f6', '9a0eea', '033500', '06c2ac', '13eac9', '650021', '6e750e', '06470c', 'ff796c', 'e6daa6', '001146', 'cea2fd', '000000', '677a04', '380282', 'ceb301', 'c04e01', '0165fc', '8e82fe', 'FF0000'];
      return '#' + colors[d];
    };
    local.setFilter = function(value) {
      filterKey = value;
    };
    local.getFilter = function() {
      return filterKey;
    };
    local.setFilterId = function(value) {
      filterId = value;
    };
    local.getFilterId = function() {
      return filterId;
    };
    local.setGameType = function(value) {
      gameType = value;
    };
    local.getGameType = function() {
      return gameType;
    };
    local.setMapType = function(value) {
      mapType = value;
    };
    local.getMapType = function() {
      return mapType;
    };
    local.setMaxZoom = function(value) {
      mapMaxZoom = value;
    };
    local.getMaxZoom = function() {
      return mapMaxZoom;
    };
    local.setIsWizard = function(key) {
      isWizard = key;
    };
    local.getIsWizard = function() {
      return isWizard;
    };
    local.setIsInteractive = function(key) {
      isInteractive = key;
    };
    local.getIsInteractive = function() {
      return isInteractive;
    };
    local.setMapId = function(key) {
      mapId = key;
    };
    local.getMapId = function() {
      return mapId;
    };
    local.setNationId = function(key) {
      nationId = key;
    };
    local.getNationId = function() {
      return nationId;
    };
    local.generateMesh = function() {
      var border, height, hexProjection, hexTopology, mousedown, mousemove, mouseup, mousing, path, projection, radius, redraw, svg, topology, width;
      width = 960;
      height = 500;
      radius = 20;
      topology = hexTopology(radius, width, height);
      projection = hexProjection(radius);
      path = d3.geoPath().projection(projection);
      svg = d3.select('.leaflet-clickable').append('svg').attr('width', width).attr('height', height);
      mousedown = function(d) {
        var mousing;
        mousing = d.fill ? -1 : +1;
        mousemove.apply(this, arguments);
      };
      mousemove = function(d) {
        if (mousing) {
          d3.select(this).classed('fill', d.fill = mousing > 0);
          border.call(redraw);
        }
      };
      mouseup = function() {
        var mousing;
        mousemove.apply(this, arguments);
        mousing = 0;
      };
      redraw = function(border) {
        border.attr('d', path(topojson.mesh(topology, topology.objects.hexagons, function(a, b) {
          return a.fill ^ b.fill;
        })));
      };
      hexTopology = function(radius, width, height) {
        var j;
        var i;
        var arcs, dx, dy, geometries, i, j, m, n, q, x, y;
        dx = radius * 2 * Math.sin(Math.PI / 3);
        dy = radius * 1.5;
        m = Math.ceil((height + radius) / dy) + 1;
        n = Math.ceil(width / dx) + 1;
        geometries = [];
        arcs = [];
        j = -1;
        while (j <= m) {
          i = -1;
          while (i <= n) {
            y = j * 2;
            x = (i + (j & 1) / 2) * 2;
            arcs.push([[x, y - 1], [1, 1]], [[x + 1, y], [0, 1]], [[x + 1, y + 1], [-1, 1]]);
            ++i;
          }
          ++j;
        }
        j = 0;
        q = 3;
        while (j < m) {
          i = 0;
          while (i < n) {
            geometries.push({
              type: 'Polygon',
              arcs: [[q, q + 1, q + 2, ~(q + (n + 2 - (j & 1)) * 3), ~(q - 2), ~(q - ((n + 2 + (j & 1)) * 3) + 2)]],
              fill: Math.random() > i / n * 2
            });
            ++i;
            q += 3;
          }
          ++j;
          q += 6;
        }
        return {
          transform: {
            translate: [0, 0],
            scale: [1, 1]
          },
          objects: {
            hexagons: {
              type: 'GeometryCollection',
              geometries: geometries
            }
          },
          arcs: arcs
        };
      };
      hexProjection = function(radius) {
        var dx, dy;
        dx = radius * 2 * Math.sin(Math.PI / 3);
        dy = radius * 1.5;
        return {
          stream: function(stream) {
            return {
              point: function(x, y) {
                stream.point(x * dx / 2, (y - ((2 - (y & 1)) / 3)) * dy / 2);
              },
              lineStart: function() {
                stream.lineStart();
              },
              lineEnd: function() {
                stream.lineEnd();
              },
              polygonStart: function() {
                stream.polygonStart();
              },
              polygonEnd: function() {
                stream.polygonEnd();
              }
            };
          }
        };
      };
      svg.append('g').attr('class', 'hexagon').selectAll('path').data(topology.objects.hexagons.geometries).enter().append('path').attr('d', function(d) {
        return path(topojson.feature(topology, d));
      }).attr('class', function(d) {
        if (d.fill) {
          return 'fill';
        } else {
          return null;
        }
      }).on('mousedown', mousedown).on('mousemove', mousemove).on('mouseup', mouseup);
      svg.append('path').datum(topojson.mesh(topology, topology.objects.hexagons)).attr('class', 'mesh').attr('d', path);
      border = svg.append('path').attr('class', 'border').call(redraw);
      mousing = 0;
    };
    local.projectPoint = function(x, y) {
      var point;
      point = map.latLngToLayerPoint(new L.LatLng(y, x));
      this.stream.point(point.x, point.y);
    };
  })(exports);

}).call(this);

//# sourceMappingURL=map.module.js.map
